# ⚓ Captain’s Log — Project Voyage Tracker 🏴‍☠️

/---------------------------------------------------------------------/

Welcome aboard, matey! 🏴‍☠️  
 
This be the **Captain’s Log**, a trusty record of our coding  
voyage through these uncharted digital seas.  

Unlike a public-facing README, this log charts the progress  
of our project’s construction and keeps track of milestones  
reached, code crafted, and battles won. ⚓
  
It serves as our personal chronicle of the workflow, a compass  
to guide future sails, and a tale of collaboration between  
the coder and Chatty, yer loyal AI first mate. 🤖  
 
Whenever ye call “Pause, Captains Log,” we’ll hoist the latest  
updates and plot our course ahead.  
 
So hoist the sails and let’s make this journey legendary! 🚢

/---------------------------------------------------------------------/

This be a backend-focused voyage, buildin’ a RESTful API  
using Express and Mongoose, rigged for Insomnia testing.  

Our prime goals are full-file code, schema accuracy, quick  
routing scaffolds, and synced models. We start with a minimal  
viable project structure, usin’ default timestamps and  
formatting as needed.  

We begin by settin’ up the project skeleton: folders, base files,  
and initial Express + MongoDB configurations.  

First order of business: Project structure and basic server.  

Prepare to create these files and folders:  

📁 config/  
  📄 connection.js  

📁 models/  
  📄 User.js  
  📄 Thought.js  

📁 routes/  
  📁 api/  
    📄 index.js  
    📄 userRoutes.js  
    📄 thoughtRoutes.js  

📄 server.js  

✅ Default is aye — I’ll provide all files now unless ye say otherwise. 

Ready to proceed?  

/---------------------------------------------------------------------/

Commit Message (20% milestone – foundational structure + models):  

feat: scaffold project structure and implement User/Thought models  

- Added initial Express server with MongoDB connection  
- Created full directory structure with API routing placeholders  
- Implemented User model with schema validation and virtual friendCount  
- Implemented Thought model with embedded Reaction schema and virtual reactionCount  
- Enabled timestamp formatting using getters  

This marks roughly 20% of the voyage complete. Here’s your current progress tracker:  

📊 Progress Tracker: 20% Complete  
✔️ 0–20%:  

 Project structure + config  

 Basic Express server  

 MongoDB connection  

 All routing files stubbed  

 User.js + Thought.js models complete  

Next 5% Milestone: Controller scaffolding with User logic  
Next 20% Milestone (40% total): Complete User routes with CRUD functional in Insomnia  

/---------------------------------------------------------------------/

Commit Message (40% milestone – User controller and routes complete):

feat: implement full User controller CRUD and friend management

- Developed User controller with all CRUD operations (create, read, update, delete)
- Added friend list add/remove functionality in controller logic
- Connected User controller methods to userRoutes for full RESTful API coverage
- Verified all User routes functional and tested in Insomnia
- Ensured schema validations and error handling in controller
- Maintained clean and consistent response formatting

This marks roughly 40% of the voyage complete. Here’s your current progress tracker:

📊 Progress Tracker: 40% Complete

✔️ 21–40%:

 Full User controller CRUD operations developed

 Friend add/remove functionality implemented

 User routes connected and tested in Insomnia

 Next 5% Milestone: Begin Thought controller scaffolding with basic CRUD methods

 Next 20% Milestone (60% total): Complete Thought controller CRUD and reaction subdocument management


/---------------------------------------------------------------------/